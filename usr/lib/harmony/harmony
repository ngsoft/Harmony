#!/bin/bash
#
# Harmony Remote Daemon (irexec manager)
# Launched by harmony command if not running, manages irexec processes and flirc hotswap
# With flirc service it detects if the usb is plugged in and launch the process when needed
#

[ $(pgrep -f -c "/bin/bash ${BASH_SOURCE[0]}") != 1 ] && [ "$harmony_real_daemon" != "1" ] && exit 1

if [ "$harmony_real_daemon" != "1" ]; then
    export harmony_real_daemon=1
    ${BASH_SOURCE[0]} &
    exit 0
fi

unset harmony_real_daemon

# Can be overriden inside < /etc/default/harmony >

check_intervals=30
disable_log=0
description="Harmony Remote Daemon"

[ ! -r /etc/default/harmony ] && echo "$description not installed, please run hrmy-setup."  && exit 1
. /etc/default/harmony
. $prefix/usr/lib/harmony/utils

for process in lircd irexec; do
    cmd which $process || throw_error_notify "$description cannot find $process, shutting down."
done

prog=harmony
sudo=gksu
flirc=$prefix/etc/init.d/flirc
irprofiles=$prefix/etc/lirc/irexec.conf.d

[ -n "$logfile" ] || logfile=/tmp/harmony.log
if [ $disable_log != 1 ]; then
    cmd rm $logfile
    cmd touch $logfile
fi

export DISPLAY=:0
export PATH=$prefix/bin:$prefix/usr/lib/harmony:$PATH
export logfile
export modules=$prefix/etc/$prog/modules
export activities=$prefix/etc/$prog/activities

# Some flags
device_on=0
process_count=0
starting=0
timer=0


#
# Run modules every seconds to perform checks
# or other things
#
run_modules(){
    [ $device_on == 1 ] || return
    local module
    for module in $modules/*.module; do
        cmd bash $module &
    done
    for module in $activities/*/*.module; do
        cmd bash $module &
    done
}

#
# Checks if irexec processes are running correctly
#
run_checks(){
    if [ $starting == 0 ] && [ $device_on == 1 ]; then
        [ $process_count == 0 ] && trigger start
        [ $process_count -gt $(pgrep -c irexec) ] && trigger restart
    fi
}


on_start(){
    if [ $device_on == 1 ] && [ $starting == 0 ]; then
        starting = 1
        process_count=0
        local file
        for file in $irprofiles/*.conf; do
            #cmd irexec -d -n $prog $file
            irexec -n $prog $file &
            ((process_count++))
        done
        while ! cmd pidof irexec; do
            sleep 1
        done
        starting=0
    fi
}

on_stop(){
    cmd killall irexec
    process_count=0
}

on_restart(){
    [ $device_on == 1 ] || return
    trigger stop
    trigger start

}


on_init(){
    trigger stop
    # Check if service is started
    if ! cmd $flirc status; then
        notify "Flirc service is stopped, need to be restarted." "Flirc"
        $sudo $flirc restart 
        cmd $flirc status || throw_error_notify "Cannot start Flirc service, shutting down."
    fi
    # Check if remote control is plugged in
    trigger change
}

on_change(){
    trigger stop
    device_on=0
    if [ -e $device ]; then
        notify "Device is connected" "Flirc"
        device_on=1
    else
        if cmd flirc-load-conf; then
            device_on=1
            # prevents remote control from sending random
            # keypresses to the wrong windows (LIRC not grabbing the device as inputlirc)
            xinput disable "$device_name"
        fi
    fi
}

on_timer(){
   [ $device_on == 1 ] || return
    cmd $flirc status || trigger init
}

on_kill(){    
    exit 0
}

on_exit(){
    #prevents start to load
    device_on=0
    trigger stop &
    cmd xinput enable "$device_name"
    notify "Stopping $description"
}



# Custom signals sent from flirc
# service when device disconnected/reconnected
trap on_change SIGUSR1
#trap on_change SIGUSR2

trap on_exit EXIT
trap on_kill SIGINT SIGTERM SIGQUIT


while true; do
    run_checks
    run_modules
    if [ $timer -gt $check_intervals ]; then 
        trigger timer
        #check_deps
        timer=0
    fi
    sleep 1
    ((timer++))
done