#!/bin/bash


# This is a general-purpose function to ask Yes/No questions in Bash, either
# with or without a default answer. It keeps repeating the question until it
# gets a valid answer.
# Source:
# https://gist.github.com/davejamesmiller/1965569
ask() {

	if [ "${OVERRIDE}" = "yes" ];
	then
		return 0
	fi

    # https://djm.me/ask
    local prompt default reply

    while true; do

        if [ "${2:-}" = "Y" ]; then
            prompt="Y/n"
            default=Y
        elif [ "${2:-}" = "N" ]; then
            prompt="y/N"
            default=N
        else
            prompt="y/n"
            default=
        fi

        # Ask the question (not using "read -p" as it uses stderr not stdout)
        echo -n "$1 [$prompt] "

        # Read the answer (use /dev/tty in case stdin is redirected from somewhere else)
        read reply </dev/tty

        # Default?
        if [ -z "$reply" ]; then
            reply=$default
        fi

        # Check if the reply is valid
        case "$reply" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac

    done
}


#
# Executes given command 
# and hides output
#
cmd(){
    $@ >/dev/null 2>&1
	return $?
}
##
# Fake process
##
noop(){
    return 0
}

#
# Display error message to stderr and exit
#
throw_error(){
    log $@
    echo "$@" >&2
    exit 1
}

#
# Log a message into a declared $logfile
#
log(){
    [ -n "$logfile" ] || [ "$disable_log" != "1" ] || return
    [ -e $logfile ] || cmd touch $logfile
    [[ -n "$@" ]] &&  echo "$(date "+%Y-%m-%d %H:%M") | $@" >> $logfile 2>&1
}

#
# Check if a process is running
#
is_running(){
    [[ -z $1 ]] && return 2
    cmd pidof -x "$1"
    return $?
}


#
# Search for process pids (if any) and kills them
#
kill_process(){
    local pids _pid
    [[ -z $1 ]] && return 1
    pids=$(pidof -x $1)
    [[ -z $pids ]] && return 0
    for _pid in $pids; do
        cmd kill $_pid
    done
}

#
# Uses Ubuntu Notification system to notify the user
# and logs the message
# [BODY] <ICON>
#

notify(){
    local _icon=$prefix/usr/share/icons/hicolor/48x48/apps/harmony.png
    [[ -n $2 ]] && _icon=$2
    [[ -z $1 ]] && return 1
    log $1
    notify-send "$1" -i "$_icon" > /dev/null 2>&1 &
    return 0
}

#
# Display error message to stderr, notify and exit
#
throw_error_notify(){
    notify "$1" "$2"
    throw_error "$1"
}

#
# Finds flirc device and display its path
#
get_device(){
    find /dev/input/ | grep "flirc"
    return $?
}

#
# Finds the device name
#
get_device_name(){
    xinput list --name-only | grep "flirc"
    return $?
}


#
# Get Harmony app Prefix
#
get_prefix(){
    dirname "$(dirname "$(pushd $(dirname "${BASH_SOURCE[0]}") > /dev/null 2>&1 && pwd && popd > /dev/null 2>&1)")"
}


#
# Trigger an event
#
trigger(){
    [ -n "$1" ] || cmd declare -F on_$1 || return 1
    on_$1
}