#!/bin/bash
#
# Harmony Remote Daemon (irexec manager)
# Launched by harmony command if not running, manages irexec processes and flirc hotswap
# As flirc service it detects if the usb is plugged in and launch the process when needed

[ $(pgrep -f -c "/bin/bash ${BASH_SOURCE[0]}") != 1 ] && exit 1

# Can be overriden inside < /etc/default/harmony >
description="Harmony Remote Daemon"
logfile=/tmp/harmony.log
check_intervals=30
disable_log=0

[ ! -r /etc/default/harmony ] && echo "Harmony Remote Daemon not installed, please run hrmy-setup."  && exit 1
. /etc/default/harmony
. $prefix/usr/lib/harmony/utils


lirc=lircd
daemon=irexec
prog=harmony
sudo=gksu
flirc=/etc/init.d/flirc


irprofiles=$prefix/etc/lirc/irexec.conf.d
modules=$prefix/etc/$prog/modules
activities=$prefix/etc/$prog/activities
#main=$prefix/etc/$prog/main

export DISPLAY=:0
export PATH=$prefix/bin:$prefix/usr/lib/harmony:$PATH
export logfile




#
# Run modules every seconds to perform checks
# or other things
#
run_modules(){
    [ $device_plugged_in == 1 ] || return
    local module
    for module in $modules/*.module; do
        cmd bash $module &
    done
    for module in $activities/*/*.module; do
        cmd bash $module &
    done
}

#
# Checks if irexec processes are running correctly
#
run_checks(){
    if [[ $device_plugged_in == 0 ]]; then
        do_stop
        return
    fi
    [ "$file_count" -gt "$(pgrep -c $daemon)" ] && do_restart
}



flirc(){
    do_stop
    # wait for next signal
    if ! cmd pidof $lirc && [ -z "$1" ]; then
        device_plugged_in=0
        return
    fi

    if [ -e $device ]; then
        notify "Device is connected" "Flirc"
        device_plugged_in=1
        do_start
    else
        device_plugged_in=0
        if cmd flirc-fix; then
            device_plugged_in=1
            # prevents remote control from sending random
            # keypresses to the wrong windows (LIRC not grabbing the device as inputlirc)
            xinput disable "$device_name"
            flirc-load-conf
            do_start
        fi
    fi
}


#
# Checks if Flirc service is running and if remote is plugged in
# use $check_intervals than can be overriden in < /etc/default/harmony >
# intervals are in seconds
#
check_deps(){
    noop
}

do_init(){
    do_stop
    # Check if service is started
    if ! cmd $flirc status; then
        notify "Flirc service is stopped, need to be restarted."
        $sudo $flirc restart 
        cmd $flirc status || throw_error_notify "Cannot start Flirc service, shutting down."
    fi
    # Check if remote control is plugged in
    flirc init
}


do_start(){
    [[ $device_plugged_in == 1 ]] || return
    file_count=0
    local file
    for file in $irprofiles/*.conf; do
        cmd irexec -d -n $prog $file
        ((file_count++))
    done
    log "Started $daemon $(pidof $daemon)"
}

do_stop(){
    cmd pidof $daemon && log "Stopped $daemon $(pidof $daemon)"
    cmd killall $daemon
}

do_restart(){
    do_stop
    do_start
}

do_kill(){
    exit 0
}

do_exit(){
    notify "Stopping $description"
    do_stop
    cmd xinput enable "$device_name"
}


# Custom signals sent from flirc
# service when device disconnected/reconnected
trap flirc SIGUSR1


trap do_exit EXIT
trap do_kill SIGINT SIGTERM SIGQUIT
timer=0
file_count=0
device_plugged_in=0

cmd rm $logfile
cmd touch $logfile

notify "Starting $description"

do_init

while true; do
    run_checks
    run_modules &
    if [ $timer -gt $check_intervals ]; then 
        check_deps &
        timer=0
    fi
    sleep 1
    ((timer++))
done
